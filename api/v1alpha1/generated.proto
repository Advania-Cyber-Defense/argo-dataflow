/*


Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package github.com.argoproj_labs.argo_dataflow.api.v1alpha1;

import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

// +kubebuilder:object:root=true
// +kubebuilder:resource:shortName=fn
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`
message Func {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional FuncSpec spec = 2;

  optional FuncStatus status = 3;
}

message FuncList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Func items = 2;
}

message FuncSpec {
  optional k8s.io.api.core.v1.Container container = 1;

  // +patchStrategy=merge
  // +patchMergeKey=name
  repeated k8s.io.api.core.v1.Volume volumes = 2;

  optional Replicas replicas = 3;

  optional Interface in = 4;

  optional Interface out = 5;

  repeated Source sources = 6;

  repeated Sink sinks = 7;

  optional string restartPolicy = 8;
}

message FuncStatus {
  optional string phase = 1;

  optional string message = 2;
}

message HTTP {
}

message Interface {
  optional bool fifo = 1;

  optional HTTP http = 2;
}

message Kafka {
  optional string name = 1;

  optional string url = 2;

  optional string topic = 3;
}

message NATS {
  optional string name = 1;

  optional string url = 2;

  optional string subject = 3;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:shortName=pl
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`
// +kubebuilder:printcolumn:name="Message",type=string,JSONPath=`.status.message`
message Pipeline {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional PipelineSpec spec = 2;

  optional PipelineStatus status = 3;
}

message PipelineList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Pipeline items = 2;
}

message PipelineSpec {
  // +patchStrategy=merge
  // +patchMergeKey=name
  repeated FuncSpec funcs = 1;
}

message PipelineStatus {
  optional string phase = 1;

  optional string message = 2;

  repeated k8s.io.apimachinery.pkg.apis.meta.v1.Condition conditions = 3;
}

message Replicas {
  optional int32 value = 1;
}

message Sink {
  optional string name = 1;

  optional NATS nats = 2;

  optional Kafka kafka = 3;
}

message Source {
  optional string name = 1;

  optional NATS nats = 2;

  optional Kafka kafka = 3;
}

