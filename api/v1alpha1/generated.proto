/*


Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package github.com.argoproj_labs.argo_dataflow.api.v1alpha1;

import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

message Container {
  optional string image = 1;

  repeated k8s.io.api.core.v1.VolumeMount volumeMounts = 5;

  optional Interface in = 3;

  repeated string command = 6;

  repeated string args = 7;
}

message Git {
  optional string image = 1;

  optional string url = 2;

  optional string path = 3;

  // +kubebuilder:default=.
  optional string branch = 4;
}

message Group {
  optional string key = 1;

  optional string endOfGroup = 2;

  optional string format = 3;

  optional Storage storage = 4;
}

message HTTP {
}

message Handler {
  optional string runtime = 4;

  optional string code = 3;
}

message Interface {
  optional bool fifo = 1;

  optional HTTP http = 2;
}

message Kafka {
  // +kubebuilder:default=default
  optional string name = 1;

  optional string url = 2;

  optional string topic = 3;
}

message Message {
  optional string data = 1;

  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time time = 2;
}

message Metrics {
  optional uint64 total = 1;

  optional uint64 errors = 5;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:shortName=pl
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`
// +kubebuilder:printcolumn:name="Message",type=string,JSONPath=`.status.message`
message Pipeline {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional PipelineSpec spec = 2;

  optional PipelineStatus status = 3;
}

message PipelineList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Pipeline items = 2;
}

message PipelineSpec {
  // +patchStrategy=merge
  // +patchMergeKey=name
  repeated StepSpec steps = 1;
}

message PipelineStatus {
  optional string phase = 1;

  optional string message = 2;

  repeated k8s.io.apimachinery.pkg.apis.meta.v1.Condition conditions = 3;
}

// Used to calculate the number of replicas.
// min(r.max, max(r.min, pending/ratio))
// Example:
// min=1, max=4, ratio=100
// pending=0, replicas=1
// pending=100, replicas=1
// pending=200, replicas=2
// pending=300, replicas=3
// pending=400, replicas=4
// pending=500, replicas=4
message Replicas {
  // +kubebuilder:default=1
  optional int32 min = 1;

  // this is both the min, and the initial value
  optional uint32 max = 2;

  // takes precedence over min
  optional uint32 ratio = 3;
}

message STAN {
  // +kubebuilder:default=default
  optional string name = 1;

  optional string natsUrl = 4;

  optional string clusterId = 5;

  optional string subject = 3;

  optional string subjectPrefix = 6;
}

message Sink {
  // +kubebuilder:default=default
  optional string name = 1;

  optional STAN stan = 2;

  optional Kafka kafka = 3;
}

message SinkStatus {
  optional Message lastMessage = 2;

  map<string, Metrics> metrics = 3;
}

message Source {
  // +kubebuilder:default=default
  optional string name = 1;

  optional STAN stan = 2;

  optional Kafka kafka = 3;
}

message SourceStatus {
  optional Message lastMessage = 2;

  optional uint64 pending = 3;

  map<string, Metrics> metrics = 4;
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`
// +kubebuilder:printcolumn:name="Message",type=string,JSONPath=`.status.message`
// +kubebuilder:printcolumn:name="Replicas",type=string,JSONPath=`.status.replicas`
message Step {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional StepSpec spec = 2;

  optional StepStatus status = 3;
}

message StepList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Step items = 2;
}

message StepSpec {
  // +kubebuilder:default=default
  optional string name = 6;

  optional Container container = 1;

  optional Handler handler = 7;

  optional Git git = 12;

  optional string filter = 8;

  optional string map = 9;

  optional Group group = 11;

  optional Replicas replicas = 2;

  // +patchStrategy=merge
  // +patchMergeKey=name
  repeated Source sources = 3;

  // +patchStrategy=merge
  // +patchMergeKey=name
  repeated Sink sinks = 4;

  // +kubebuilder:default=OnFailure
  optional string restartPolicy = 5;

  optional bool terminator = 10;

  // +patchStrategy=merge
  // +patchMergeKey=name
  repeated k8s.io.api.core.v1.Volume volumes = 13;

  // +kubebuilder:default=pipeline-runner
  optional string serviceAccountName = 14;
}

message StepStatus {
  optional string phase = 1;

  optional string message = 2;

  optional uint32 replicas = 5;

  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastScaleTime = 6;

  map<string, SourceStatus> sourceStatuses = 3;

  map<string, SinkStatus> sinkStatuses = 4;
}

message Storage {
  optional string name = 1;

  // volume name
  optional string subPath = 2;
}

