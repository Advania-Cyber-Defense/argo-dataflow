/*


Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package github.com.argoproj_labs.argo_dataflow.api.v1alpha1;

import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

message Container {
  optional k8s.io.api.core.v1.Container container = 1;

  repeated k8s.io.api.core.v1.Volume volumes = 2;

  optional Interface in = 3;

  optional Interface out = 4;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:shortName=fn
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`
// +kubebuilder:printcolumn:name="Message",type=string,JSONPath=`.status.message`
// +kubebuilder:printcolumn:name="Replicas",type=string,JSONPath=`.status.replicas`
message Func {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional FuncSpec spec = 2;

  optional FuncStatus status = 3;
}

message FuncList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Func items = 2;
}

message FuncSpec {
  optional string name = 6;

  optional Container container = 1;

  optional Handler handler = 7;

  optional Replicas replicas = 2;

  // +patchStrategy=merge
  // +patchMergeKey=name
  repeated Source sources = 3;

  // +patchStrategy=merge
  // +patchMergeKey=name
  repeated Sink sinks = 4;

  optional string restartPolicy = 5;
}

message FuncStatus {
  optional string phase = 1;

  optional string message = 2;

  optional uint64 replicas = 5;

  // +patchStrategy=merge
  // +patchMergeKey=name
  repeated SourceStatus sourceStatuses = 3;

  // +patchStrategy=merge
  // +patchMergeKey=name
  repeated SinkStatus sinkStatuses = 4;
}

message HTTP {
}

message Handler {
  optional string runtime = 4;

  optional string url = 2;

  optional string path = 5;

  optional string branch = 6;

  optional string code = 3;
}

message Interface {
  optional bool fifo = 1;

  optional HTTP http = 2;
}

message Kafka {
  optional string name = 1;

  optional string url = 2;

  optional string topic = 3;
}

message Message {
  optional string data = 1;

  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time time = 2;
}

message Metrics {
  optional uint32 replica = 4;

  optional uint64 total = 1;

  optional uint64 pending = 3;
}

message NATS {
  optional string name = 1;

  optional string url = 2;

  optional string subject = 3;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:shortName=pl
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`
// +kubebuilder:printcolumn:name="Message",type=string,JSONPath=`.status.message`
message Pipeline {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional PipelineSpec spec = 2;

  optional PipelineStatus status = 3;
}

message PipelineList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Pipeline items = 2;
}

message PipelineSpec {
  // +patchStrategy=merge
  // +patchMergeKey=name
  repeated FuncSpec funcs = 1;
}

message PipelineStatus {
  optional string phase = 1;

  optional string message = 2;

  repeated k8s.io.apimachinery.pkg.apis.meta.v1.Condition conditions = 3;
}

message Replicas {
  optional int32 value = 1;
}

message Sink {
  optional string name = 1;

  optional NATS nats = 2;

  optional Kafka kafka = 3;
}

message SinkStatus {
  optional string name = 1;

  optional Message lastMessage = 2;

  // +patchStrategy=merge
  // +patchMergeKey=replica
  repeated Metrics metrics = 3;
}

message Source {
  optional string name = 1;

  optional NATS nats = 2;

  optional Kafka kafka = 3;
}

message SourceStatus {
  optional string name = 1;

  optional Message lastMessage = 2;

  // +patchStrategy=merge
  // +patchMergeKey=replica
  repeated Metrics metrics = 3;
}

